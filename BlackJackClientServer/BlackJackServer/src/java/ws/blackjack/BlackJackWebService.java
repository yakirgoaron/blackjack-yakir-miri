
package ws.blackjack;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.FaultAction;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.6-1b01 
 * Generated source version: 2.2
 * 
 */
@WebService(name = "BlackJackWebService", targetNamespace = "http://blackjack.ws/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface BlackJackWebService {


    /**
     * 
     * @param eventId
     * @param playerId
     * @return
     *     returns java.util.List<ws.blackjack.Event>
     * @throws InvalidParameters_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getEvents", targetNamespace = "http://blackjack.ws/", className = "ws.blackjack.GetEvents")
    @ResponseWrapper(localName = "getEventsResponse", targetNamespace = "http://blackjack.ws/", className = "ws.blackjack.GetEventsResponse")
    @javax.xml.ws.Action(input = "http://blackjack.ws/BlackJackWebService/getEventsRequest", output = "http://blackjack.ws/BlackJackWebService/getEventsResponse", fault = {
        @FaultAction(className = InvalidParameters_Exception.class, value = "http://blackjack.ws/BlackJackWebService/getEvents/Fault/InvalidParameters")
    })
    public List<Event> getEvents(
        @WebParam(name = "playerId", targetNamespace = "")
        int playerId,
        @WebParam(name = "eventId", targetNamespace = "")
        int eventId)
        throws InvalidParameters_Exception
    ;

    /**
     * 
     * @param humanPlayers
     * @param computerizedPlayers
     * @param name
     * @throws DuplicateGameName_Exception
     * @throws InvalidParameters_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "createGame", targetNamespace = "http://blackjack.ws/", className = "ws.blackjack.CreateGame")
    @ResponseWrapper(localName = "createGameResponse", targetNamespace = "http://blackjack.ws/", className = "ws.blackjack.CreateGameResponse")
    @javax.xml.ws.Action(input = "http://blackjack.ws/BlackJackWebService/createGameRequest", output = "http://blackjack.ws/BlackJackWebService/createGameResponse", fault = {
        @FaultAction(className = DuplicateGameName_Exception.class, value = "http://blackjack.ws/BlackJackWebService/createGame/Fault/DuplicateGameName"),
        @FaultAction(className = InvalidParameters_Exception.class, value = "http://blackjack.ws/BlackJackWebService/createGame/Fault/InvalidParameters")
    })
    public void createGame(
        @WebParam(name = "name", targetNamespace = "")
        String name,
        @WebParam(name = "humanPlayers", targetNamespace = "")
        int humanPlayers,
        @WebParam(name = "computerizedPlayers", targetNamespace = "")
        int computerizedPlayers)
        throws DuplicateGameName_Exception, InvalidParameters_Exception
    ;

    /**
     * 
     * @param money
     * @param gameName
     * @return
     *     returns int
     * @throws InvalidParameters_Exception
     * @throws GameDoesNotExists_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "joinGame", targetNamespace = "http://blackjack.ws/", className = "ws.blackjack.JoinGame")
    @ResponseWrapper(localName = "joinGameResponse", targetNamespace = "http://blackjack.ws/", className = "ws.blackjack.JoinGameResponse")
    @javax.xml.ws.Action(input = "http://blackjack.ws/BlackJackWebService/joinGameRequest", output = "http://blackjack.ws/BlackJackWebService/joinGameResponse", fault = {
        @FaultAction(className = GameDoesNotExists_Exception.class, value = "http://blackjack.ws/BlackJackWebService/joinGame/Fault/GameDoesNotExists"),
        @FaultAction(className = InvalidParameters_Exception.class, value = "http://blackjack.ws/BlackJackWebService/joinGame/Fault/InvalidParameters")
    })
    public int joinGame(
        @WebParam(name = "gameName", targetNamespace = "")
        String gameName,
        @WebParam(name = "money", targetNamespace = "")
        float money)
        throws GameDoesNotExists_Exception, InvalidParameters_Exception
    ;

    /**
     * 
     * @param eventId
     * @param playerId
     * @param bet
     * @param action
     * @throws InvalidParameters_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "playerAction", targetNamespace = "http://blackjack.ws/", className = "ws.blackjack.PlayerAction")
    @ResponseWrapper(localName = "playerActionResponse", targetNamespace = "http://blackjack.ws/", className = "ws.blackjack.PlayerActionResponse")
    @javax.xml.ws.Action(input = "http://blackjack.ws/BlackJackWebService/playerActionRequest", output = "http://blackjack.ws/BlackJackWebService/playerActionResponse", fault = {
        @FaultAction(className = InvalidParameters_Exception.class, value = "http://blackjack.ws/BlackJackWebService/playerAction/Fault/InvalidParameters")
    })
    public void playerAction(
        @WebParam(name = "playerId", targetNamespace = "")
        int playerId,
        @WebParam(name = "eventId", targetNamespace = "")
        int eventId,
        @WebParam(name = "action", targetNamespace = "")
        ws.blackjack.Action action,
        @WebParam(name = "bet", targetNamespace = "")
        float bet)
        throws InvalidParameters_Exception
    ;

    /**
     * 
     * @param playerId
     * @throws InvalidParameters_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "resign", targetNamespace = "http://blackjack.ws/", className = "ws.blackjack.Resign")
    @ResponseWrapper(localName = "resignResponse", targetNamespace = "http://blackjack.ws/", className = "ws.blackjack.ResignResponse")
    @javax.xml.ws.Action(input = "http://blackjack.ws/BlackJackWebService/resignRequest", output = "http://blackjack.ws/BlackJackWebService/resignResponse", fault = {
        @FaultAction(className = InvalidParameters_Exception.class, value = "http://blackjack.ws/BlackJackWebService/resign/Fault/InvalidParameters")
    })
    public void resign(
        @WebParam(name = "playerId", targetNamespace = "")
        int playerId)
        throws InvalidParameters_Exception
    ;

    /**
     * 
     * @param xmlData
     * @return
     *     returns java.lang.String
     * @throws DuplicateGameName_Exception
     * @throws InvalidParameters_Exception
     * @throws InvalidXML_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "createGameFromXML", targetNamespace = "http://blackjack.ws/", className = "ws.blackjack.CreateGameFromXML")
    @ResponseWrapper(localName = "createGameFromXMLResponse", targetNamespace = "http://blackjack.ws/", className = "ws.blackjack.CreateGameFromXMLResponse")
    @javax.xml.ws.Action(input = "http://blackjack.ws/BlackJackWebService/createGameFromXMLRequest", output = "http://blackjack.ws/BlackJackWebService/createGameFromXMLResponse", fault = {
        @FaultAction(className = DuplicateGameName_Exception.class, value = "http://blackjack.ws/BlackJackWebService/createGameFromXML/Fault/DuplicateGameName"),
        @FaultAction(className = InvalidParameters_Exception.class, value = "http://blackjack.ws/BlackJackWebService/createGameFromXML/Fault/InvalidParameters"),
        @FaultAction(className = InvalidXML_Exception.class, value = "http://blackjack.ws/BlackJackWebService/createGameFromXML/Fault/InvalidXML")
    })
    public String createGameFromXML(
        @WebParam(name = "xmlData", targetNamespace = "")
        String xmlData)
        throws DuplicateGameName_Exception, InvalidParameters_Exception, InvalidXML_Exception
    ;

    /**
     * 
     * @param gameName
     * @return
     *     returns ws.blackjack.GameDetails
     * @throws GameDoesNotExists_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getGameDetails", targetNamespace = "http://blackjack.ws/", className = "ws.blackjack.GetGameDetails")
    @ResponseWrapper(localName = "getGameDetailsResponse", targetNamespace = "http://blackjack.ws/", className = "ws.blackjack.GetGameDetailsResponse")
    @javax.xml.ws.Action(input = "http://blackjack.ws/BlackJackWebService/getGameDetailsRequest", output = "http://blackjack.ws/BlackJackWebService/getGameDetailsResponse", fault = {
        @FaultAction(className = GameDoesNotExists_Exception.class, value = "http://blackjack.ws/BlackJackWebService/getGameDetails/Fault/GameDoesNotExists")
    })
    public GameDetails getGameDetails(
        @WebParam(name = "gameName", targetNamespace = "")
        String gameName)
        throws GameDoesNotExists_Exception
    ;

    /**
     * 
     * @return
     *     returns java.util.List<java.lang.String>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getWaitingGames", targetNamespace = "http://blackjack.ws/", className = "ws.blackjack.GetWaitingGames")
    @ResponseWrapper(localName = "getWaitingGamesResponse", targetNamespace = "http://blackjack.ws/", className = "ws.blackjack.GetWaitingGamesResponse")
    @javax.xml.ws.Action(input = "http://blackjack.ws/BlackJackWebService/getWaitingGamesRequest", output = "http://blackjack.ws/BlackJackWebService/getWaitingGamesResponse")
    public List<String> getWaitingGames();

    /**
     * 
     * @return
     *     returns java.util.List<java.lang.String>
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getActiveGames", targetNamespace = "http://blackjack.ws/", className = "ws.blackjack.GetActiveGames")
    @ResponseWrapper(localName = "getActiveGamesResponse", targetNamespace = "http://blackjack.ws/", className = "ws.blackjack.GetActiveGamesResponse")
    @javax.xml.ws.Action(input = "http://blackjack.ws/BlackJackWebService/getActiveGamesRequest", output = "http://blackjack.ws/BlackJackWebService/getActiveGamesResponse")
    public List<String> getActiveGames();

    /**
     * 
     * @param gameName
     * @return
     *     returns java.util.List<ws.blackjack.PlayerDetails>
     * @throws GameDoesNotExists_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getPlayersDetails", targetNamespace = "http://blackjack.ws/", className = "ws.blackjack.GetPlayersDetails")
    @ResponseWrapper(localName = "getPlayersDetailsResponse", targetNamespace = "http://blackjack.ws/", className = "ws.blackjack.GetPlayersDetailsResponse")
    @javax.xml.ws.Action(input = "http://blackjack.ws/BlackJackWebService/getPlayersDetailsRequest", output = "http://blackjack.ws/BlackJackWebService/getPlayersDetailsResponse", fault = {
        @FaultAction(className = GameDoesNotExists_Exception.class, value = "http://blackjack.ws/BlackJackWebService/getPlayersDetails/Fault/GameDoesNotExists")
    })
    public List<PlayerDetails> getPlayersDetails(
        @WebParam(name = "gameName", targetNamespace = "")
        String gameName)
        throws GameDoesNotExists_Exception
    ;

    /**
     * 
     * @param playerId
     * @param gameName
     * @return
     *     returns ws.blackjack.PlayerDetails
     * @throws InvalidParameters_Exception
     * @throws GameDoesNotExists_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getPlayerDetails", targetNamespace = "http://blackjack.ws/", className = "ws.blackjack.GetPlayerDetails")
    @ResponseWrapper(localName = "getPlayerDetailsResponse", targetNamespace = "http://blackjack.ws/", className = "ws.blackjack.GetPlayerDetailsResponse")
    @javax.xml.ws.Action(input = "http://blackjack.ws/BlackJackWebService/getPlayerDetailsRequest", output = "http://blackjack.ws/BlackJackWebService/getPlayerDetailsResponse", fault = {
        @FaultAction(className = GameDoesNotExists_Exception.class, value = "http://blackjack.ws/BlackJackWebService/getPlayerDetails/Fault/GameDoesNotExists"),
        @FaultAction(className = InvalidParameters_Exception.class, value = "http://blackjack.ws/BlackJackWebService/getPlayerDetails/Fault/InvalidParameters")
    })
    public PlayerDetails getPlayerDetails(
        @WebParam(name = "gameName", targetNamespace = "")
        String gameName,
        @WebParam(name = "playerId", targetNamespace = "")
        int playerId)
        throws GameDoesNotExists_Exception, InvalidParameters_Exception
    ;

}
